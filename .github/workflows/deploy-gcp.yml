name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: note-taking-api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check Secrets
        run: |
          echo "Checking if required secrets are configured..."
          echo "PROJECT_ID configured: ${{ secrets.GCP_PROJECT_ID != '' }}"
          echo "GCP_SA_KEY configured: ${{ secrets.GCP_SA_KEY != '' }}"
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "ERROR: GCP_PROJECT_ID secret is not configured!"
            echo "Please follow the setup guide in deploy/GITHUB_SECRETS_SETUP.md"
            exit 1
          fi
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "ERROR: GCP_SA_KEY secret is not configured!"
            echo "Please follow the setup guide in deploy/GITHUB_SECRETS_SETUP.md"
            exit 1
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Build and Push Container
        run: |
          docker build -f Dockerfile.production -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: Get Redis Host
        id: redis
        run: |
          REDIS_HOST=$(gcloud redis instances describe note-taking-redis --region=$REGION --format="value(host)")
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --add-cloudsql-instances ${PROJECT_ID}:${REGION}:note-taking-db \
            --vpc-connector note-taking-connector \
            --vpc-egress all-traffic \
            --set-env-vars "REDIS_HOST=${{ steps.redis.outputs.redis_host }},ENVIRONMENT=production,DB_HOST=/cloudsql/${PROJECT_ID}:${REGION}:note-taking-db,DB_USER=noteuser,DB_NAME=note_taking_db" \
            --set-secrets "DB_PASSWORD=db-password:latest,SECRET_KEY=jwt-secret:latest,API_KEY=api-key:latest" \
            --max-instances 10 \
            --min-instances 1 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --concurrency 80

      - name: Run Database Migrations
        run: |
          # Create or update migration job
          # Note: DB_HOST uses Unix socket format for Cloud SQL (/cloudsql/project:region:instance)
          gcloud run jobs update run-migrations \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --add-cloudsql-instances ${PROJECT_ID}:${REGION}:note-taking-db \
            --vpc-connector note-taking-connector \
            --set-env-vars "REDIS_HOST=${{ steps.redis.outputs.redis_host }},ENVIRONMENT=production,DB_HOST=/cloudsql/${PROJECT_ID}:${REGION}:note-taking-db,DB_USER=noteuser,DB_NAME=note_taking_db" \
            --set-secrets "DB_PASSWORD=db-password:latest,SECRET_KEY=jwt-secret:latest" \
            --command "alembic" \
            --args "upgrade,head" || \
          gcloud run jobs create run-migrations \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --add-cloudsql-instances ${PROJECT_ID}:${REGION}:note-taking-db \
            --vpc-connector note-taking-connector \
            --set-env-vars "REDIS_HOST=${{ steps.redis.outputs.redis_host }},ENVIRONMENT=production,DB_HOST=/cloudsql/${PROJECT_ID}:${REGION}:note-taking-db,DB_USER=noteuser,DB_NAME=note_taking_db" \
            --set-secrets "DB_PASSWORD=db-password:latest,SECRET_KEY=jwt-secret:latest" \
            --command "alembic" \
            --args "upgrade,head"
          
          # Execute migrations
          gcloud run jobs execute run-migrations --region $REGION --wait

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format "value(status.url)")
          echo "Service deployed at: $SERVICE_URL"
          
          # Test health endpoint
          curl -f "${SERVICE_URL}/health" || exit 1
          
          echo "Deployment successful!"
          echo "API Docs: ${SERVICE_URL}/docs" 